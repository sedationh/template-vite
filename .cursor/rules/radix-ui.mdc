---
description: 
globs: 
alwaysApply: true
---
# Radix UI 开发规则

## Cursor AI 指令

### 开发偏好
- 始终优先推荐使用 Radix UI 组件而不是自定义组件
- 当用户需要创建新组件时，首先检查是否有对应的 Radix UI 组件可用
- 推荐使用 `@radix-ui/themes` 中的高级组件进行快速开发
- 对于复杂交互，推荐使用 `@radix-ui/react-*` 系列组件

### 代码生成偏好
- 生成代码时优先使用 Radix UI 组件
- 使用 TypeScript 和严格的类型定义
- 遵循 Radix UI 的设计模式和最佳实践
- 包含适当的可访问性属性

### 样式偏好
- 优先使用 Tailwind CSS 进行样式定制
- 使用 Radix UI 的内置主题系统
- 避免直接修改 Radix UI 组件的内部样式
- 推荐使用 CSS 变量进行主题定制

## 组件开发原则

### 1. 优先使用 Radix UI 组件
- 始终优先考虑使用 `@radix-ui/themes` 中的组件
- 对于复杂交互组件，使用 `@radix-ui/react-*` 系列组件
- 避免重新造轮子，充分利用 Radix UI 的可访问性和功能

### 2. 组件导入规范
```typescript
// ✅ 推荐：从 themes 导入
import { Button, Card, Text, Flex, Box } from '@radix-ui/themes'

// ✅ 推荐：从 react 系列导入原始组件
import * as Dialog from '@radix-ui/react-dialog'
import * as DropdownMenu from '@radix-ui/react-dropdown-menu'
```

### 3. 样式和主题
- 使用 Radix UI 的内置主题系统
- 优先使用 `className` 和 Tailwind CSS 进行样式定制
- 避免直接修改 Radix UI 组件的内部样式
- 使用 CSS 变量进行主题定制

### 4. 可访问性
- 所有自定义组件都应该遵循 ARIA 规范
- 使用 Radix UI 提供的可访问性功能
- 确保键盘导航支持
- 提供适当的焦点管理

### 5. 组件组合模式
```typescript
// ✅ 推荐：使用组合模式
<Card>
  <Flex direction="column" gap="3">
    <Text size="5" weight="bold">标题</Text>
    <Text color="gray">描述文本</Text>
    <Button>操作按钮</Button>
  </Flex>
</Card>
```

### 6. 状态管理
- 使用 Radix UI 提供的状态管理 hooks
- 避免手动管理复杂的状态逻辑
- 利用 Radix UI 的受控和非受控模式

### 7. 响应式设计
- 使用 Radix UI 的响应式工具
- 利用 `Flex` 和 `Grid` 组件进行布局
- 使用 `Box` 组件进行容器管理

### 8. 性能优化
- 按需导入 Radix UI 组件
- 避免在渲染函数中创建新的组件实例
- 使用 React.memo 优化组件重渲染

### 9. 错误处理
- 为所有 Radix UI 组件提供适当的错误边界
- 处理组件可能出现的异常情况
- 提供降级方案

### 10. 测试策略
- 测试 Radix UI 组件的集成
- 确保可访问性测试通过
- 测试组件的交互行为

## 常用 Radix UI 组件推荐

### 基础组件
- `Button` - 按钮组件
- `Card` - 卡片容器
- `Text` - 文本组件
- `Flex` - 弹性布局
- `Box` - 基础容器
- `Grid` - 网格布局
- `Container` - 容器组件

### 表单组件
- `TextField` - 文本输入
- `TextArea` - 多行文本输入
- `Select` - 选择器
- `Checkbox` - 复选框
- `RadioGroup` - 单选组
- `Switch` - 开关

### 交互组件
- `Dialog` - 对话框
- `DropdownMenu` - 下拉菜单
- `Popover` - 弹出框
- `Tooltip` - 工具提示
- `Tabs` - 标签页
- `Accordion` - 手风琴

### 导航组件
- `NavigationMenu` - 导航菜单
- `Breadcrumbs` - 面包屑
- `Pagination` - 分页

## 代码示例

### 基础组件使用
```typescript
import { Button, Card, Text, Flex, Box } from '@radix-ui/themes'

export function UserCard({ user }: { user: User }) {
  return (
    <Card>
      <Flex direction="column" gap="3">
        <Text size="5" weight="bold">{user.name}</Text>
        <Text color="gray">{user.email}</Text>
        <Button variant="solid" color="blue">
          查看详情
        </Button>
      </Flex>
    </Card>
  )
}
```

### 复杂交互组件
```typescript
import * as Dialog from '@radix-ui/react-dialog'
import { Button, Flex, Text } from '@radix-ui/themes'

export function ConfirmDialog({ 
  open, 
  onOpenChange, 
  onConfirm 
}: ConfirmDialogProps) {
  return (
    <Dialog.Root open={open} onOpenChange={onOpenChange}>
      <Dialog.Trigger asChild>
        <Button>打开对话框</Button>
      </Dialog.Trigger>
      <Dialog.Portal>
        <Dialog.Overlay className="fixed inset-0 bg-black/50" />
        <Dialog.Content className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-lg">
          <Dialog.Title>
            <Text size="5" weight="bold">确认操作</Text>
          </Dialog.Title>
          <Dialog.Description>
            <Text color="gray">您确定要执行此操作吗？</Text>
          </Dialog.Description>
          <Flex gap="3" mt="4">
            <Button onClick={onConfirm}>确认</Button>
            <Button variant="soft" onClick={() => onOpenChange(false)}>
              取消
            </Button>
          </Flex>
        </Dialog.Content>
      </Dialog.Portal>
    </Dialog.Root>
  )
}
```

### 表单组件示例
```typescript
import { TextField, TextArea, Select, Checkbox, Button, Flex, Text } from '@radix-ui/themes'

export function ContactForm() {
  return (
    <Flex direction="column" gap="4" maxWidth="400px">
      <Text size="6" weight="bold">联系我们</Text>
      
      <TextField.Root>
        <TextField.Input placeholder="您的姓名" />
      </TextField.Root>
      
      <TextField.Root>
        <TextField.Input type="email" placeholder="邮箱地址" />
      </TextField.Root>
      
      <Select.Root>
        <Select.Trigger placeholder="选择主题" />
        <Select.Content>
          <Select.Item value="general">一般咨询</Select.Item>
          <Select.Item value="support">技术支持</Select.Item>
          <Select.Item value="feedback">意见反馈</Select.Item>
        </Select.Content>
      </Select.Root>
      
      <TextArea placeholder="请输入您的消息..." />
      
      <Checkbox defaultChecked>
        <Text size="2">我同意接收相关通知</Text>
      </Checkbox>
      
      <Button size="3">发送消息</Button>
    </Flex>
  )
}
```

## 文件组织
- 将 Radix UI 组件相关的逻辑放在独立的文件中
- 使用 TypeScript 接口定义组件 props
- 保持组件的单一职责原则

## 依赖管理
- 定期更新 Radix UI 版本
- 注意版本兼容性
- 使用 pnpm 管理依赖

## 文档和注释
- 为复杂的 Radix UI 组件使用添加注释
- 记录自定义样式和主题配置
- 维护组件使用示例